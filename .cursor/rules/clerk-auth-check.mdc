---
description: Clerk + Convex admin auth guard
globs:
alwaysApply: true
---

This rule helps ensure that React components using Convex queries with Clerk authentication correctly handle loading and authentication states before attempting to fetch data, especially for admin-protected queries.

````
name: convex-clerk-admin-auth-guard
description: Ensures React components correctly handle auth state before calling admin-protected Convex queries.
globs:
  - src/**/*.ts
  - src/**/*.tsx
condition: |
  // Heuristic: Component uses useQuery/usePaginatedQuery for an "admin" query
  // AND does NOT seem to have robust useConvexAuth handling for skipping.
  // This is a simplified check; real implementation might need more sophisticated AST parsing.
  const fileContent = ctx.currentFile.content;
  const usesAdminQuery = /use(Query|PaginatedQuery)\\s*\\(\\s*api\\.\\w+\\.\\w+Admin/.test(fileContent);
  const usesConvexAuth = /useConvexAuth\\s*\\(\s*\\)/.test(fileContent);
  const hasSkipLogic = /authIsLoading\\s*\\|\\|\\s*!isAuthenticated\\s*\\?\\s*\"skip\"/.test(fileContent);

  if (usesAdminQuery && (!usesConvexAuth || !hasSkipLogic)) {
    return true; // Condition met to offer advice
  }
  return false;
advice: |
  When using Convex queries that require admin authentication (often named like `...Admin`) with Clerk, ensure your React component correctly handles authentication states to prevent errors:

  1.  Use `useConvexAuth` to read `isLoading` and `isAuthenticated`.

  2.  Show a loading placeholder while `isLoading` is true.

  3.  If not authenticated after loading, prompt for login (or route away).

  4.  Conditionally pass `"skip"` to `useQuery` / `usePaginatedQuery` until authenticated.

  Example snippet:

  ```
  import { useQuery, useConvexAuth } from "convex/react";
  import { api } from "../../convex/_generated/api";

  const { isLoading, isAuthenticated } = useConvexAuth();
  const data = useQuery(
    api.functions.listAllEventsForAdmin,
    isLoading || !isAuthenticated ? "skip" : {}
  );
  ```

````
